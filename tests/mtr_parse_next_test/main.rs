use bolero::check;
use mdbutil::{Lsn, mtr::MtrChain, ring::RingReader};

fn main() {
    let buf = vec![
        // MTR Chain count=2, len=123, lsn=163
        //   1: Mtr { space_id: 3, page_no: 45, op: Extended }
        //   2: Mtr { space_id: 3, page_no: 45, op: Option }
        0x20, 0x5e, 0x3, 0x2d, 0x3, 0xd, 0x3, 0xf, 0x20, 0x0, 0x0, 0x0, 0x0, 0x17, 0xc6, 0x0, 0x0,
        0x0, 0x2d, 0x1, 0x78, 0x4, 0x74, 0x65, 0x73, 0x74, 0x1, 0x61, 0x7, 0x50, 0x52, 0x49, 0x4d,
        0x41, 0x52, 0x59, 0xc, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x66, 0x78, 0x30,
        0x31, 0x3, 0x6, 0x4, 0x68, 0x84, 0xa2, 0x89, 0x7, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x6, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x22, 0x0, 0x4, 0x74, 0x65,
        0x73, 0x74, 0x1, 0x1, 0x61, 0x2, 0x7, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x3, 0xc,
        0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x66, 0x78, 0x30, 0x31, 0x77, 0x3, 0x2d,
        0x0, 0x80, 0x89, 0x7e, 0x61, 0x0, 0xa8, 0xf3, 0xd8, 0x55,
        // MTR Chain count=1, len=39, lsn=286
        //   1: Mtr { space_id: 0, page_no: 0, op: FileModify }
        0xb0, 0x12, 0x4, 0x0, 0x2e, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x69, 0x6e, 0x6e,
        0x6f, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
        0x2e, 0x69, 0x62, 0x64, 0x0, 0xff, 0x42, 0xf0, 0x81,
        // Termination marker.
        //
        0x00,
    ];

    check!().with_type().for_each(|lsn: &Lsn| {
        let mut r0 = RingReader::buf_at(buf.as_slice(), 0, *lsn as usize);

        let chain = match MtrChain::parse_next(&mut r0) {
            Ok(chain) => chain,
            Err(_e) => {
                // Nothing sensible at this LSN.
                return;
            }
        };

        match chain.len {
            123 => {
                assert_eq!(chain.mtr.len(), 2, "chain mtr count");
            }
            39 => {
                assert_eq!(chain.mtr.len(), 1, "chain mtr count");
            }
            _ => panic!("Unexpected chain length: {}", chain.len),
        }
    });
}
